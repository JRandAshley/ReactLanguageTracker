{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\randa\\\\source\\\\repos\\\\LangAppReact\\\\Client\\\\reactlangapp\\\\src\\\\Morpheme.js\";\nimport React from 'react';\nimport \"./App.scss\";\nimport Axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Morpheme(props) {\n  const getPhoneme = phonemeId => {\n    new Promise((resolve, reject) => {\n      Axios.post('http://localhost:3001/api/getSpecific/', {\n        id: phonemeId\n      }).then(response => {\n        console.log(response.data[0]);\n        let phonemeToReturn = response.data[0];\n        return phonemeToReturn;\n      });\n    });\n  };\n\n  const sleep = ms => {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  };\n\n  const sounds = props.sounds;\n\n  const getPhoneticSymbols = () => {\n    const soundIds = sounds.split(\",\");\n    soundIds.forEach(async soundId => {\n      console.log(soundId);\n      const soundSymbol = getPhoneme(soundId).symbol;\n      await sleep(2000);\n      console.log(soundSymbol);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: getPhoneticSymbols(props.sounds)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: props.type\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: props.meaning\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Morpheme;\nexport default Morpheme;\n\nvar _c;\n\n$RefreshReg$(_c, \"Morpheme\");","map":{"version":3,"sources":["C:/Users/randa/source/repos/LangAppReact/Client/reactlangapp/src/Morpheme.js"],"names":["React","Axios","Morpheme","props","getPhoneme","phonemeId","Promise","resolve","reject","post","id","then","response","console","log","data","phonemeToReturn","sleep","ms","setTimeout","sounds","getPhoneticSymbols","soundIds","split","forEach","soundId","soundSymbol","symbol","type","meaning"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,YAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACrB,QAAMC,UAAU,GAAIC,SAAD,IAAe;AAC9B,QAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7BP,MAAAA,KAAK,CAACQ,IAAN,CAAW,wCAAX,EAAqD;AACjDC,QAAAA,EAAE,EAAEL;AAD6C,OAArD,EAEGM,IAFH,CAESC,QAAD,IAAc;AAClBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAAT,CAAc,CAAd,CAAZ;AACA,YAAIC,eAAe,GAAGJ,QAAQ,CAACG,IAAT,CAAc,CAAd,CAAtB;AACA,eAAOC,eAAP;AACH,OAND;AAOH,KARD;AASH,GAVD;;AAYA,QAAMC,KAAK,GAAIC,EAAD,IAAQ;AAClB,WAAO,IAAIZ,OAAJ,CACLC,OAAO,IAAIY,UAAU,CAACZ,OAAD,EAAUW,EAAV,CADhB,CAAP;AAGH,GAJD;;AAMA,QAAME,MAAM,GAAGjB,KAAK,CAACiB,MAArB;;AAEA,QAAMC,kBAAkB,GAAG,MAAM;AAC7B,UAAMC,QAAQ,GAAGF,MAAM,CAACG,KAAP,CAAa,GAAb,CAAjB;AACAD,IAAAA,QAAQ,CAACE,OAAT,CAAiB,MAAMC,OAAN,IAAkB;AAC/BZ,MAAAA,OAAO,CAACC,GAAR,CAAYW,OAAZ;AACA,YAAMC,WAAW,GAAGtB,UAAU,CAACqB,OAAD,CAAV,CAAoBE,MAAxC;AACA,YAAMV,KAAK,CAAC,IAAD,CAAX;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAYY,WAAZ;AACH,KALD;AAMH,GARD;;AAUA,sBACI;AAAA,4BACI;AAAA,gBAAKL,kBAAkB,CAAClB,KAAK,CAACiB,MAAP;AAAvB;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,gBAAIjB,KAAK,CAACyB;AAAV;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAA,gBAAIzB,KAAK,CAAC0B;AAAV;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;KAtCQ3B,Q;AAuCT,eAAeA,QAAf","sourcesContent":["import React from 'react';\r\nimport \"./App.scss\";\r\nimport Axios from 'axios';\r\n\r\nfunction Morpheme(props) {\r\n    const getPhoneme = (phonemeId) => {\r\n        new Promise((resolve, reject) => {\r\n            Axios.post('http://localhost:3001/api/getSpecific/', {\r\n                id: phonemeId\r\n            }).then((response) => {\r\n                console.log(response.data[0])\r\n                let phonemeToReturn = response.data[0]\r\n                return phonemeToReturn;\r\n            });\r\n        })\r\n    }\r\n\r\n    const sleep = (ms) => {\r\n        return new Promise(\r\n          resolve => setTimeout(resolve, ms)\r\n        );\r\n    }\r\n\r\n    const sounds = props.sounds\r\n\r\n    const getPhoneticSymbols = () => {\r\n        const soundIds = sounds.split(\",\");\r\n        soundIds.forEach(async(soundId) => {\r\n            console.log(soundId)\r\n            const soundSymbol = getPhoneme(soundId).symbol;\r\n            await sleep(2000)\r\n            console.log(soundSymbol)\r\n        });\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <h3>{getPhoneticSymbols(props.sounds)}</h3>\r\n            <p>{props.type}</p>\r\n            <p>{props.meaning}</p>\r\n        </div>\r\n    )\r\n}\r\nexport default Morpheme"]},"metadata":{},"sourceType":"module"}
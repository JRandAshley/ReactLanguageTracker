{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\randa\\\\source\\\\repos\\\\reactlangapp\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { unstable_renderSubtreeIntoContainer } from 'react-dom';\nimport Phoneme from './Phoneme';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [phonemes, setPhonemes] = useState([{\n    symbol: 'A',\n    easyType: 'a',\n    type: 'V',\n    notes: 'It is a'\n  }, {\n    symbol: 'B',\n    easyType: 'b',\n    type: 'C',\n    notes: 'b letter',\n    sol: 'state',\n    poa: 'place',\n    moa: 'manner'\n  }, {\n    symbol: 'C',\n    easyType: 'c',\n    type: 'C',\n    notes: 'a c'\n  }, {\n    symbol: 'I',\n    easyType: 'i',\n    type: 'V',\n    notes: 'an I'\n  }]);\n  const [consonants, setConsonants] = useState([{\n    symbol: 'B',\n    easyType: 'b',\n    type: 'C',\n    notes: 'b letter',\n    sol: 'state',\n    poa: 'place',\n    moa: 'manner'\n  }, {\n    symbol: 'C',\n    easyType: 'c',\n    type: 'C',\n    notes: 'a c',\n    sol: 'state c',\n    poa: 'place c',\n    moa: 'manner c'\n  }]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [phonemes.map(phoneme => /*#__PURE__*/_jsxDEV(Phoneme, {\n      symbol: phoneme.symbol,\n      easyType: phoneme.easyType,\n      type: phoneme.type,\n      notes: phoneme.notes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 17\n    }, this)), consonants.map(consonant => /*#__PURE__*/_jsxDEV(Phoneme, {\n      symbol: phoneme.symbol,\n      easyType: phoneme.easyType,\n      type: phoneme.type,\n      notes: phoneme.notes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"uwnHTOoaAvDmx960gb8nHLrieyQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/randa/source/repos/reactlangapp/src/App.js"],"names":["React","useState","unstable_renderSubtreeIntoContainer","Phoneme","App","phonemes","setPhonemes","symbol","easyType","type","notes","sol","poa","moa","consonants","setConsonants","map","phoneme","consonant"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,mCAAT,QAAoD,WAApD;AACA,OAAOC,OAAP,MAAoB,WAApB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACX,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,CACrC;AAACM,IAAAA,MAAM,EAAE,GAAT;AAAcC,IAAAA,QAAQ,EAAE,GAAxB;AAA6BC,IAAAA,IAAI,EAAE,GAAnC;AAAwCC,IAAAA,KAAK,EAAE;AAA/C,GADqC,EAErC;AAACH,IAAAA,MAAM,EAAE,GAAT;AAAcC,IAAAA,QAAQ,EAAE,GAAxB;AAA6BC,IAAAA,IAAI,EAAE,GAAnC;AAAwCC,IAAAA,KAAK,EAAE,UAA/C;AACAC,IAAAA,GAAG,EAAE,OADL;AACcC,IAAAA,GAAG,EAAE,OADnB;AAC4BC,IAAAA,GAAG,EAAE;AADjC,GAFqC,EAIrC;AAACN,IAAAA,MAAM,EAAE,GAAT;AAAcC,IAAAA,QAAQ,EAAE,GAAxB;AAA6BC,IAAAA,IAAI,EAAE,GAAnC;AAAwCC,IAAAA,KAAK,EAAE;AAA/C,GAJqC,EAKrC;AAACH,IAAAA,MAAM,EAAE,GAAT;AAAcC,IAAAA,QAAQ,EAAE,GAAxB;AAA6BC,IAAAA,IAAI,EAAE,GAAnC;AAAwCC,IAAAA,KAAK,EAAE;AAA/C,GALqC,CAAD,CAAxC;AAOA,QAAM,CAACI,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAAC,CACzC;AAACM,IAAAA,MAAM,EAAE,GAAT;AAAcC,IAAAA,QAAQ,EAAE,GAAxB;AAA6BC,IAAAA,IAAI,EAAE,GAAnC;AAAwCC,IAAAA,KAAK,EAAE,UAA/C;AACAC,IAAAA,GAAG,EAAE,OADL;AACcC,IAAAA,GAAG,EAAE,OADnB;AAC4BC,IAAAA,GAAG,EAAE;AADjC,GADyC,EAGzC;AAACN,IAAAA,MAAM,EAAE,GAAT;AAAcC,IAAAA,QAAQ,EAAE,GAAxB;AAA6BC,IAAAA,IAAI,EAAE,GAAnC;AAAwCC,IAAAA,KAAK,EAAE,KAA/C;AACAC,IAAAA,GAAG,EAAE,SADL;AACgBC,IAAAA,GAAG,EAAE,SADrB;AACgCC,IAAAA,GAAG,EAAE;AADrC,GAHyC,CAAD,CAA5C;AAOA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,eACKR,QAAQ,CAACW,GAAT,CAAaC,OAAO,iBACjB,QAAC,OAAD;AAAS,MAAA,MAAM,EAAEA,OAAO,CAACV,MAAzB;AAAiC,MAAA,QAAQ,EAAEU,OAAO,CAACT,QAAnD;AAA6D,MAAA,IAAI,EAAES,OAAO,CAACR,IAA3E;AAAiF,MAAA,KAAK,EAAEQ,OAAO,CAACP;AAAhG;AAAA;AAAA;AAAA;AAAA,YADH,CADL,EAIKI,UAAU,CAACE,GAAX,CAAeE,SAAS,iBACrB,QAAC,OAAD;AAAS,MAAA,MAAM,EAAED,OAAO,CAACV,MAAzB;AAAiC,MAAA,QAAQ,EAAEU,OAAO,CAACT,QAAnD;AAA6D,MAAA,IAAI,EAAES,OAAO,CAACR,IAA3E;AAAiF,MAAA,KAAK,EAAEQ,OAAO,CAACP;AAAhG;AAAA;AAAA;AAAA;AAAA,YADH,CAJL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH;;GAzBQN,G;;KAAAA,G;AA2BT,eAAeA,GAAf","sourcesContent":["import React, {useState} from 'react';\r\nimport { unstable_renderSubtreeIntoContainer } from 'react-dom';\r\nimport Phoneme from './Phoneme';\r\n\r\nfunction App() {\r\n    const [phonemes, setPhonemes] = useState([\r\n        {symbol: 'A', easyType: 'a', type: 'V', notes: 'It is a'},\r\n        {symbol: 'B', easyType: 'b', type: 'C', notes: 'b letter',\r\n        sol: 'state', poa: 'place', moa: 'manner'},\r\n        {symbol: 'C', easyType: 'c', type: 'C', notes: 'a c'},\r\n        {symbol: 'I', easyType: 'i', type: 'V', notes: 'an I'}\r\n    ])\r\n    const [consonants, setConsonants] = useState([\r\n        {symbol: 'B', easyType: 'b', type: 'C', notes: 'b letter',\r\n        sol: 'state', poa: 'place', moa: 'manner'},\r\n        {symbol: 'C', easyType: 'c', type: 'C', notes: 'a c',\r\n        sol: 'state c', poa: 'place c', moa: 'manner c'}\r\n    ])\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            {phonemes.map(phoneme =>(\r\n                <Phoneme symbol={phoneme.symbol} easyType={phoneme.easyType} type={phoneme.type} notes={phoneme.notes}/>\r\n            ))}\r\n            {consonants.map(consonant =>(\r\n                <Phoneme symbol={phoneme.symbol} easyType={phoneme.easyType} type={phoneme.type} notes={phoneme.notes}/>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}
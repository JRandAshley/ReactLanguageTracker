{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\randa\\\\source\\\\repos\\\\reactlangapp\\\\src\\\\IPAConsonants.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction IPAConsonants(props) {\n  _s();\n\n  const phonemes = props.array;\n  const [headersPOA, setHeadersPOA] = useState([]);\n  const [headersMOA, setHeadersMOA] = useState([]);\n\n  function getRowContent(moaToTest) {\n    let row = [...new Set(phonemes.filter(phoneme => phoneme.moa === moaToTest))];\n    return row;\n  }\n\n  function addRowSpaces(rowPhonemes) {\n    let result = [];\n    headersPOA.forEach(element => {\n      //check what phoneme to put in each column\n      for (var i = 0; i < rowPhonemes.length; i++) {\n        //check if each phoneme in that row matches the column\n        if (rowPhonemes[i].poa == element) {\n          result.push(rowPhonemes[i].symbol);\n          break;\n        }\n\n        result.push(\"\");\n      }\n    });\n    console.log(result);\n    return result;\n  }\n\n  function getConsonantHeadersPOA() {\n    let uniquePOA = [...new Set(phonemes.filter(phoneme => phoneme.type === \"C\").map(phoneme => phoneme.poa))];\n    return uniquePOA;\n  }\n\n  function getConsonantHeadersMOA() {\n    let uniqueMOA = [...new Set(phonemes.filter(phoneme => phoneme.type === \"C\").map(phoneme => phoneme.moa))];\n    return uniqueMOA;\n  }\n\n  useEffect(() => {\n    const poaHeader = getConsonantHeadersPOA;\n    setHeadersPOA(poaHeader);\n    const moaHeader = getConsonantHeadersMOA;\n    setHeadersMOA(moaHeader);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getConsonantHeadersPOA,\n      children: \"POA\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getConsonantHeadersMOA,\n      children: \"MOA\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"---\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this), headersPOA.map(e => /*#__PURE__*/_jsxDEV(\"th\", {\n          children: e\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), headersMOA.map(c => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: c\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), addRowSpaces(getRowContent(c)).map(d => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: d\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n\n_s(IPAConsonants, \"auA7zYFAm+6iL5rMQqPpfFlb7D4=\");\n\n_c = IPAConsonants;\nexport default IPAConsonants;\n\nvar _c;\n\n$RefreshReg$(_c, \"IPAConsonants\");","map":{"version":3,"sources":["C:/Users/randa/source/repos/reactlangapp/src/IPAConsonants.js"],"names":["React","useState","useEffect","IPAConsonants","props","phonemes","array","headersPOA","setHeadersPOA","headersMOA","setHeadersMOA","getRowContent","moaToTest","row","Set","filter","phoneme","moa","addRowSpaces","rowPhonemes","result","forEach","element","i","length","poa","push","symbol","console","log","getConsonantHeadersPOA","uniquePOA","type","map","getConsonantHeadersMOA","uniqueMOA","poaHeader","moaHeader","e","c","d"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport \"./App.css\";\r\n\r\nfunction IPAConsonants(props) {\r\n    const phonemes = props.array;\r\n    const [headersPOA, setHeadersPOA] = useState([]);\r\n    const [headersMOA, setHeadersMOA] = useState([]);\r\n\r\n    function getRowContent(moaToTest){\r\n        let row = [...new Set(phonemes\r\n            .filter(phoneme => phoneme.moa === moaToTest))]\r\n\r\n        return row;\r\n    }\r\n\r\n    function addRowSpaces(rowPhonemes) {\r\n        let result = []\r\n        headersPOA.forEach(element => { //check what phoneme to put in each column\r\n            for(var i = 0; i < rowPhonemes.length; i++) { //check if each phoneme in that row matches the column\r\n                if (rowPhonemes[i].poa == element) {\r\n                    result.push(rowPhonemes[i].symbol)\r\n                    break;\r\n                }\r\n                result.push(\"\")\r\n            }\r\n        });\r\n        console.log(result)\r\n        return result;\r\n    }\r\n\r\n    function getConsonantHeadersPOA() {\r\n        let uniquePOA = [...new Set(phonemes\r\n            .filter(phoneme => phoneme.type === \"C\")\r\n            .map(phoneme => (phoneme.poa)))];\r\n\r\n        return uniquePOA;\r\n    }\r\n\r\n    function getConsonantHeadersMOA() {\r\n        let uniqueMOA = [...new Set(phonemes\r\n            .filter(phoneme => phoneme.type === \"C\")\r\n            .map(phoneme => (phoneme.moa)))];\r\n\r\n        return uniqueMOA;\r\n    }\r\n\r\n    useEffect(() => {\r\n        const poaHeader = getConsonantHeadersPOA;\r\n        setHeadersPOA(poaHeader);\r\n\r\n        const moaHeader = getConsonantHeadersMOA;\r\n        setHeadersMOA(moaHeader);\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={getConsonantHeadersPOA}>POA</button>\r\n            <button onClick={getConsonantHeadersMOA}>MOA</button>\r\n\r\n            <table>\r\n                <tr>\r\n                    <th>---</th>\r\n                    {headersPOA.map( e =>\r\n                        <th>{e}</th>)}\r\n                </tr>\r\n\r\n                {headersMOA.map(c =>\r\n                <tr>\r\n                    <th>{c}</th>\r\n                    {addRowSpaces(getRowContent(c)).map(d => \r\n                        <td>{d}</td>)}\r\n                </tr>)}\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\nexport default IPAConsonants;"]},"metadata":{},"sourceType":"module"}
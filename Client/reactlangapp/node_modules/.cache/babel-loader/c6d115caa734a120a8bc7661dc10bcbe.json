{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\randa\\\\source\\\\repos\\\\LangAppReact\\\\Client\\\\reactlangapp\\\\src\\\\MorphemeManager.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport \"./App.scss\";\nimport Axios from 'axios';\nimport Phoneme from './Phoneme';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MorphemeManager() {\n  _s();\n\n  const initialData = [];\n  const [morphemes, setMorphemes] = useState(initialData);\n  const [phonemes, setPhonemes] = useState([]);\n\n  const getPhonemes = () => {\n    new Promise((resolve, reject) => {\n      Axios.get(\"http://localhost:3001/api/get\").then(response => {\n        setPhonemes(response.data);\n      });\n      resolve(\"updated phonemes from database\");\n    });\n  };\n\n  useEffect(() => {\n    getPhonemes();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"flexbox-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      align: \"center\",\n      children: \"Morphemes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this), Object.values(phonemes).map(phoneme => /*#__PURE__*/_jsxDEV(Phoneme, {\n      symbol: phoneme.symbol,\n      easyType: phoneme.easyType,\n      type: phoneme.type,\n      notes: phoneme.notes,\n      sol: phoneme.sol,\n      poa: phoneme.poa,\n      moa: phoneme.moa\n    }, phoneme.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MorphemeManager, \"3ek/+IzSaXMkT1njvnvVX0sS83c=\");\n\n_c = MorphemeManager;\nexport default MorphemeManager;\n\nvar _c;\n\n$RefreshReg$(_c, \"MorphemeManager\");","map":{"version":3,"sources":["C:/Users/randa/source/repos/LangAppReact/Client/reactlangapp/src/MorphemeManager.js"],"names":["React","useState","useEffect","Axios","Phoneme","MorphemeManager","initialData","morphemes","setMorphemes","phonemes","setPhonemes","getPhonemes","Promise","resolve","reject","get","then","response","data","Object","values","map","phoneme","symbol","easyType","type","notes","sol","poa","moa","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAO,YAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;;;AAEA,SAASC,eAAT,GAA2B;AAAA;;AACvB,QAAMC,WAAW,GAAG,EAApB;AAIA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAACK,WAAD,CAA1C;AAEA,QAAM,CAACG,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;;AAEA,QAAMU,WAAW,GAAG,MAAM;AACtB,QAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7BX,MAAAA,KAAK,CAACY,GAAN,CAAU,+BAAV,EAA2CC,IAA3C,CAAiDC,QAAD,IAAc;AAC1DP,QAAAA,WAAW,CAACO,QAAQ,CAACC,IAAV,CAAX;AACH,OAFD;AAGAL,MAAAA,OAAO,CAAC,gCAAD,CAAP;AACH,KALD;AAMH,GAPD;;AASAX,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,WAAW;AACd,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACA;AAAK,IAAA,KAAK,EAAC,mBAAX;AAAA,4BACI;AAAI,MAAA,KAAK,EAAC,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEKQ,MAAM,CAACC,MAAP,CAAcX,QAAd,EAAwBY,GAAxB,CAA4BC,OAAO,iBAChC,QAAC,OAAD;AAA0B,MAAA,MAAM,EAAEA,OAAO,CAACC,MAA1C;AAAkD,MAAA,QAAQ,EAAED,OAAO,CAACE,QAApE;AAA8E,MAAA,IAAI,EAAEF,OAAO,CAACG,IAA5F;AAAkG,MAAA,KAAK,EAAEH,OAAO,CAACI,KAAjH;AACA,MAAA,GAAG,EAAEJ,OAAO,CAACK,GADb;AACkB,MAAA,GAAG,EAAEL,OAAO,CAACM,GAD/B;AACoC,MAAA,GAAG,EAAEN,OAAO,CAACO;AADjD,OAAcP,OAAO,CAACQ,EAAtB;AAAA;AAAA;AAAA;AAAA,YADH,CAFL;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AASH;;GA/BQzB,e;;KAAAA,e;AAgCT,eAAeA,eAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport \"./App.scss\";\r\nimport Axios from 'axios';\r\nimport Phoneme from './Phoneme';\r\n\r\nfunction MorphemeManager() { \r\n    const initialData = [\r\n        \r\n    ]\r\n\r\n    const [morphemes, setMorphemes] = useState(initialData)\r\n\r\n    const [phonemes, setPhonemes] = useState([])\r\n\r\n    const getPhonemes = () => {\r\n        new Promise((resolve, reject) => {\r\n            Axios.get(\"http://localhost:3001/api/get\").then((response) => {\r\n                setPhonemes(response.data);\r\n            });\r\n            resolve(\"updated phonemes from database\")\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getPhonemes();\r\n    }, []);\r\n\r\n    return(\r\n    <div class=\"flexbox-container\">\r\n        <h1 align=\"center\">Morphemes</h1>\r\n        {Object.values(phonemes).map(phoneme =>(\r\n            <Phoneme key={phoneme.id} symbol={phoneme.symbol} easyType={phoneme.easyType} type={phoneme.type} notes={phoneme.notes}\r\n            sol={phoneme.sol} poa={phoneme.poa} moa={phoneme.moa}/>\r\n        ))}\r\n    </div>\r\n    )\r\n}\r\nexport default MorphemeManager"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\randa\\\\source\\\\repos\\\\reactlangapp\\\\src\\\\PhonemeManager.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Phoneme from './Phoneme';\nimport IPAConsonants from './IPAConsonants';\nimport \"./App.scss\";\nimport ConsonantForm from './ConsonantForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PhonemeManager() {\n  _s();\n\n  //default phonemes for development\n  const [phonemes, setPhonemes] = useState([{\n    symbol: 'A',\n    easyType: 'a',\n    type: 'V',\n    notes: 'It is a',\n    height: 'low',\n    backness: 'front',\n    rounding: 'unrounded',\n    tenseness: 'lax'\n  }, {\n    symbol: 'B',\n    easyType: 'b',\n    type: 'C',\n    notes: 'b letter',\n    sol: 'state',\n    poa: 'place',\n    moa: 'manner'\n  }, {\n    symbol: 'D',\n    easyType: 'd',\n    type: 'C',\n    notes: '',\n    sol: 'voiced',\n    poa: 'place',\n    moa: 'manner 2'\n  }, {\n    symbol: 'F',\n    easyType: 'f',\n    type: 'C',\n    notes: '',\n    sol: 'voiced',\n    poa: 'place 2',\n    moa: 'manner'\n  }, {\n    symbol: 'G',\n    easyType: 'g',\n    type: 'C',\n    notes: '',\n    sol: 'unvoiced',\n    poa: 'back',\n    moa: 'trill'\n  }, {\n    symbol: 'H',\n    easyType: 'h',\n    type: 'C',\n    notes: '',\n    sol: 'unvoiced',\n    poa: 'dental',\n    moa: 'frikative'\n  }, {\n    symbol: 'J',\n    easyType: 'j',\n    type: 'C',\n    notes: '',\n    sol: 'voiced',\n    poa: 'dental',\n    moa: 'trill'\n  }, {\n    symbol: 'C',\n    easyType: 'c',\n    type: 'C',\n    notes: 'a c',\n    sol: 'state c',\n    poa: 'place c',\n    moa: 'manner c'\n  }, {\n    symbol: 'I',\n    easyType: 'i',\n    type: 'V',\n    notes: 'an I',\n    height: 'mid',\n    backness: 'mid',\n    rounding: 'rounded',\n    tenseness: 'lax'\n  }, {\n    symbol: 'O',\n    easyType: 'o',\n    type: 'V',\n    notes: 'notes',\n    height: 'high',\n    backness: 'back',\n    rounding: 'rounded',\n    tenseness: 'tense'\n  }]); //adds phoneme submitted by the consonant form\n\n  const consonantFormCallback = consonantFormData => {\n    setPhonemes(prevState => ({ ...prevState,\n      consonantFormData\n    }));\n  }; //headers for consonants table\n\n\n  const [headersPOA, setHeadersPOA] = useState([]);\n  const [headersMOA, setHeadersMOA] = useState([]);\n\n  function getRowContent(moaToTest) {\n    // get consonant table row contents\n    let row = [...new Set(Object.values(phonemes).filter(phoneme => phoneme.moa === moaToTest))];\n    let testRow = Object.values(phonemes).filter(phoneme => phoneme.moa === moaToTest); //{console.log(Object.values(phonemes)\n    //    .filter(phoneme => phoneme.moa === moaToTest))}\n\n    return testRow;\n  }\n\n  function addRowSpaces(rowPhonemes) {\n    // add spacing to consonant table rows\n    let result = [];\n    headersPOA.forEach(element => {\n      //check what phoneme to put in each column\n      var found = false; //no phonemes fit in this column yet\n\n      for (var i = 0; i < rowPhonemes.length; i++) {\n        //check if any of the phoneme in that row matches the column\n        if (rowPhonemes[i].poa == element) {\n          result.push(rowPhonemes[i].symbol);\n          rowPhonemes.shift();\n          found = true;\n          break;\n        }\n      }\n\n      if (found == false) {\n        result.push(\"\");\n      }\n    });\n    return result;\n  }\n\n  function getConsonantHeadersPOA() {\n    //get unique POA\n    let uniquePOA = [...new Set(Object.values(phonemes).filter(phoneme => phoneme.type === \"C\").map(phoneme => phoneme.poa))];\n    return uniquePOA;\n  }\n\n  function getConsonantHeadersMOA() {\n    //get unique MOA\n    let uniqueMOA = [...new Set(Object.values(phonemes).filter(phoneme => phoneme.type === \"C\").map(phoneme => phoneme.moa))];\n    return uniqueMOA;\n  }\n\n  useEffect(() => {\n    const poaHeader = getConsonantHeadersPOA;\n    setHeadersPOA(poaHeader);\n    const moaHeader = getConsonantHeadersMOA;\n    setHeadersMOA(moaHeader);\n  }, [phonemes]);\n  /*\r\n  useEffect(() => { //logs updates to phonemes for testing\r\n      console.log('useEffect')\r\n      console.log(Object.values(phonemes))\r\n      for (let i = 0; i < phonemes.length; i++) {\r\n          console.log(phonemes[i])\r\n      }\r\n  \r\n  }, [phonemes])\r\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\" \", /*#__PURE__*/_jsxDEV(ConsonantForm, {\n      formCallback: consonantFormCallback\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      class: \"table\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"---\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this), headersPOA.map(e =>\n        /*#__PURE__*/\n        //headers for POA\n        _jsxDEV(\"th\", {\n          children: e\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), headersMOA.map(c =>\n      /*#__PURE__*/\n      //headers for MOA\n      _jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: c\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this), addRowSpaces(getRowContent(c)).map(d =>\n        /*#__PURE__*/\n        //row content with spaces\n        _jsxDEV(\"td\", {\n          children: [console.log(d), /*#__PURE__*/_jsxDEV(\"button\", {\n            children: d\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 29\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"h1\", {\n      class: \"header\",\n      children: \"Consonants\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"float-container\",\n      children: Object.values(phonemes).filter(phoneme => phoneme.type === \"C\").map(phoneme => /*#__PURE__*/_jsxDEV(Phoneme, {\n        symbol: phoneme.symbol,\n        easyType: phoneme.easyType,\n        type: phoneme.type,\n        notes: phoneme.notes,\n        sol: phoneme.sol,\n        poa: phoneme.poa,\n        moa: phoneme.moa\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"h1\", {\n      class: \"header\",\n      children: \"Vowels\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"float-container\",\n      children: Object.values(phonemes).filter(phoneme => phoneme.type === \"V\").map(phoneme => /*#__PURE__*/_jsxDEV(Phoneme, {\n        symbol: phoneme.symbol,\n        easyType: phoneme.easyType,\n        type: phoneme.type,\n        notes: phoneme.notes,\n        height: phoneme.height,\n        backness: phoneme.backness,\n        rounding: phoneme.rounding,\n        tenseness: phoneme.tenseness\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PhonemeManager, \"0hYdissWVMxlr4GQBl+WdVOSAms=\");\n\n_c = PhonemeManager;\nexport default PhonemeManager;\n\nvar _c;\n\n$RefreshReg$(_c, \"PhonemeManager\");","map":{"version":3,"sources":["C:/Users/randa/source/repos/reactlangapp/src/PhonemeManager.js"],"names":["React","useState","useEffect","Phoneme","IPAConsonants","ConsonantForm","PhonemeManager","phonemes","setPhonemes","symbol","easyType","type","notes","height","backness","rounding","tenseness","sol","poa","moa","consonantFormCallback","consonantFormData","prevState","headersPOA","setHeadersPOA","headersMOA","setHeadersMOA","getRowContent","moaToTest","row","Set","Object","values","filter","phoneme","testRow","addRowSpaces","rowPhonemes","result","forEach","element","found","i","length","push","shift","getConsonantHeadersPOA","uniquePOA","map","getConsonantHeadersMOA","uniqueMOA","poaHeader","moaHeader","e","c","d","console","log"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport Phoneme from './Phoneme';\r\nimport IPAConsonants from './IPAConsonants';\r\nimport \"./App.scss\";\r\nimport ConsonantForm from './ConsonantForm';\r\n\r\nfunction PhonemeManager() { //default phonemes for development\r\n    const [phonemes, setPhonemes] = useState([\r\n        {symbol: 'A', easyType: 'a', type: 'V', notes: 'It is a',\r\n        height:'low', backness:'front', rounding:'unrounded', tenseness:'lax'},\r\n        {symbol: 'B', easyType: 'b', type: 'C', notes: 'b letter',\r\n        sol: 'state', poa: 'place', moa: 'manner'},\r\n        {symbol: 'D', easyType: 'd', type: 'C', notes: '',\r\n        sol: 'voiced', poa: 'place', moa: 'manner 2'},\r\n        {symbol: 'F', easyType: 'f', type: 'C', notes: '',\r\n        sol: 'voiced', poa: 'place 2', moa: 'manner'},\r\n        {symbol: 'G', easyType: 'g', type: 'C', notes: '',\r\n        sol: 'unvoiced', poa: 'back', moa: 'trill'},\r\n        {symbol: 'H', easyType: 'h', type: 'C', notes: '',\r\n        sol: 'unvoiced', poa: 'dental', moa: 'frikative'},\r\n        {symbol: 'J', easyType: 'j', type: 'C', notes: '',\r\n        sol: 'voiced', poa: 'dental', moa: 'trill'},\r\n        {symbol: 'C', easyType: 'c', type: 'C', notes: 'a c',\r\n        sol: 'state c', poa: 'place c', moa: 'manner c'},\r\n        {symbol: 'I', easyType: 'i', type: 'V', notes: 'an I',\r\n        height:'mid', backness:'mid', rounding:'rounded', tenseness:'lax'},\r\n        {symbol:'O', easyType:'o', type:'V', notes:'notes',\r\n        height:'high', backness:'back', rounding:'rounded', tenseness:'tense'}\r\n    ])\r\n    \r\n    //adds phoneme submitted by the consonant form\r\n    const consonantFormCallback = (consonantFormData) => {\r\n        setPhonemes(prevState => ({\r\n            ...prevState,\r\n            consonantFormData,\r\n        }))\r\n    }\r\n\r\n    //headers for consonants table\r\n    const [headersPOA, setHeadersPOA] = useState([]);\r\n    const [headersMOA, setHeadersMOA] = useState([]);\r\n\r\n    function getRowContent(moaToTest){// get consonant table row contents\r\n        let row = [...new Set(Object.values(phonemes)\r\n            .filter(phoneme => phoneme.moa === moaToTest))]\r\n\r\n        let testRow = Object.values(phonemes)\r\n            .filter(phoneme => phoneme.moa === moaToTest)\r\n        //{console.log(Object.values(phonemes)\r\n        //    .filter(phoneme => phoneme.moa === moaToTest))}\r\n        return testRow;\r\n    }\r\n\r\n    function addRowSpaces(rowPhonemes) {// add spacing to consonant table rows\r\n        let result = []\r\n\r\n        headersPOA.forEach(element => { //check what phoneme to put in each column\r\n            var found = false; //no phonemes fit in this column yet\r\n            for(var i = 0; i < rowPhonemes.length; i++) { //check if any of the phoneme in that row matches the column\r\n                \r\n                if(rowPhonemes[i].poa == element) {\r\n                    result.push(rowPhonemes[i].symbol)\r\n                    rowPhonemes.shift()\r\n                    found = true;\r\n                    break;\r\n                }\r\n            }\r\n            if(found == false){\r\n                result.push(\"\")\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    function getConsonantHeadersPOA() {//get unique POA\r\n        let uniquePOA = [...new Set(Object.values(phonemes)\r\n            .filter(phoneme => phoneme.type === \"C\")\r\n            .map(phoneme => (phoneme.poa)))];\r\n\r\n        return uniquePOA;\r\n    }\r\n\r\n    function getConsonantHeadersMOA() {//get unique MOA\r\n        let uniqueMOA = [...new Set(Object.values(phonemes)\r\n            .filter(phoneme => phoneme.type === \"C\")\r\n            .map(phoneme => (phoneme.moa)))];\r\n\r\n        return uniqueMOA;\r\n    }\r\n\r\n    useEffect(() => {\r\n        const poaHeader = getConsonantHeadersPOA;\r\n        setHeadersPOA(poaHeader);\r\n\r\n        const moaHeader = getConsonantHeadersMOA;\r\n        setHeadersMOA(moaHeader);\r\n    }, [phonemes]);\r\n\r\n    /*\r\n   useEffect(() => { //logs updates to phonemes for testing\r\n        console.log('useEffect')\r\n        console.log(Object.values(phonemes))\r\n        for (let i = 0; i < phonemes.length; i++) {\r\n            console.log(phonemes[i])\r\n        }\r\n    \r\n    }, [phonemes])\r\n    */\r\n\r\n    return (\r\n        <div> {/* The form to add consonants */}\r\n            <ConsonantForm formCallback = {consonantFormCallback}/>\r\n            <hr />\r\n            {/*\r\n            <hr />\r\n            <IPAConsonants array = {phonemes}/>\r\n            <hr />\r\n            */}\r\n            <table class=\"table\"> {/* Consonant Table */}\r\n                <tr>\r\n                    <th>---</th>\r\n                    {headersPOA.map( e => //headers for POA\r\n                        <th>{e}</th>)}\r\n                </tr>\r\n\r\n                {headersMOA.map(c => //headers for MOA\r\n                <tr>\r\n                    <th>{c}</th>\r\n                    {addRowSpaces(getRowContent(c)).map(d => //row content with spaces\r\n                        <td>\r\n                            {console.log(d)}\r\n                            <button>{d}</button> {/* each phoneme as a button */}\r\n                        </td>)}\r\n                </tr>)}\r\n            </table>\r\n\r\n\r\n\r\n            <hr /> {/* List of Consonants */}\r\n            <h1 class=\"header\">Consonants</h1>\r\n            <div class=\"float-container\"> \r\n                {Object.values(phonemes).filter(phoneme => phoneme.type === \"C\").map(phoneme =>(\r\n                    <Phoneme symbol={phoneme.symbol} easyType={phoneme.easyType} type={phoneme.type} notes={phoneme.notes}\r\n                    sol={phoneme.sol} poa={phoneme.poa} moa={phoneme.moa}/>\r\n                ))}\r\n            </div>\r\n\r\n            <hr /> {/* List of Vowels */}\r\n            <h1 class=\"header\">Vowels</h1>\r\n            <div class=\"float-container\">\r\n                {Object.values(phonemes).filter(phoneme => phoneme.type === \"V\").map(phoneme =>(\r\n                    <Phoneme symbol={phoneme.symbol} easyType={phoneme.easyType} type={phoneme.type} notes={phoneme.notes}\r\n                    height={phoneme.height} backness={phoneme.backness} rounding={phoneme.rounding} tenseness={phoneme.tenseness}/>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default PhonemeManager;"]},"metadata":{},"sourceType":"module"}
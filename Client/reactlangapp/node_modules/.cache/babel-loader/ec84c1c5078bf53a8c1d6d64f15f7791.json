{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\randa\\\\source\\\\repos\\\\reactlangapp\\\\src\\\\IPAConsonants.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction IPAConsonants(props) {\n  _s();\n\n  const phonemes = props.array;\n  const [headersPOA, setHeadersPOA] = useState([]);\n  const [headersMOA, setHeadersMOA] = useState([]);\n\n  function getRowContent(moaToTest) {\n    let row = [...new Set(phonemes.filter(phoneme => phoneme.moa === moaToTest).map(phoneme => phoneme.symbol))];\n    console.log(moaToTest);\n    return row;\n  }\n\n  function getConsonantHeadersPOA() {\n    let uniquePOA = [...new Set(phonemes.filter(phoneme => phoneme.type === \"C\").map(phoneme => phoneme.poa))];\n    console.log(uniquePOA);\n    return uniquePOA;\n  }\n\n  function getConsonantHeadersMOA() {\n    let uniqueMOA = [...new Set(phonemes.filter(phoneme => phoneme.type === \"C\").map(phoneme => phoneme.moa))];\n    console.log(uniqueMOA);\n    return uniqueMOA;\n  }\n\n  useEffect(() => {\n    const poaHeader = getConsonantHeadersPOA;\n    setHeadersPOA(poaHeader);\n    console.log(headersPOA);\n    const moaHeader = getConsonantHeadersMOA;\n    setHeadersMOA(poaHeader);\n    console.log(headersMOA);\n    console.log(phonemes);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getConsonantHeadersPOA,\n      children: \"POA\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getConsonantHeadersMOA,\n      children: \"MOA\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"---\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this), headersPOA.map(e => /*#__PURE__*/_jsxDEV(\"th\", {\n          children: e\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), headersMOA.map(c => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: c\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: \"test\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }, this)\n        /*row = phonemes.filter(phoneme => phoneme.moa === e )\r\n        row = [...new Set(phonemes\r\n        .filter(phoneme => phoneme.moa === e)\r\n        .map(phoneme => (phoneme.symbol)))]*/\n        ]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)), /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Plosive\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Smith\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"50\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Nasal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Jackson\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"94\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n\n_s(IPAConsonants, \"auA7zYFAm+6iL5rMQqPpfFlb7D4=\");\n\n_c = IPAConsonants;\nexport default IPAConsonants;\n\nvar _c;\n\n$RefreshReg$(_c, \"IPAConsonants\");","map":{"version":3,"sources":["C:/Users/randa/source/repos/reactlangapp/src/IPAConsonants.js"],"names":["React","useState","useEffect","IPAConsonants","props","phonemes","array","headersPOA","setHeadersPOA","headersMOA","setHeadersMOA","getRowContent","moaToTest","row","Set","filter","phoneme","moa","map","symbol","console","log","getConsonantHeadersPOA","uniquePOA","type","poa","getConsonantHeadersMOA","uniqueMOA","poaHeader","moaHeader","e","c"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport \"./App.css\";\r\n\r\nfunction IPAConsonants(props) {\r\n    const phonemes = props.array;\r\n    const [headersPOA, setHeadersPOA] = useState([]);\r\n    const [headersMOA, setHeadersMOA] = useState([]);\r\n\r\n    function getRowContent(moaToTest){\r\n        let row = [...new Set(phonemes\r\n            .filter(phoneme => phoneme.moa === moaToTest)\r\n            .map(phoneme => (phoneme.symbol)))]\r\n\r\n            console.log(moaToTest)\r\n        return row;\r\n    }\r\n\r\n    function getConsonantHeadersPOA() {\r\n        let uniquePOA = [...new Set(phonemes\r\n            .filter(phoneme => phoneme.type === \"C\")\r\n            .map(phoneme => (phoneme.poa)))];\r\n\r\n        console.log(uniquePOA);\r\n\r\n        return uniquePOA;\r\n    }\r\n\r\n    function getConsonantHeadersMOA() {\r\n        let uniqueMOA = [...new Set(phonemes\r\n            .filter(phoneme => phoneme.type === \"C\")\r\n            .map(phoneme => (phoneme.moa)))];\r\n\r\n        console.log(uniqueMOA)\r\n\r\n        return uniqueMOA;\r\n    }\r\n\r\n    useEffect(() => {\r\n        const poaHeader = getConsonantHeadersPOA;\r\n        setHeadersPOA(poaHeader);\r\n        console.log(headersPOA);\r\n\r\n        const moaHeader = getConsonantHeadersMOA;\r\n        setHeadersMOA(poaHeader);\r\n        console.log(headersMOA);\r\n\r\n        console.log(phonemes);\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={getConsonantHeadersPOA}>POA</button>\r\n            <button onClick={getConsonantHeadersMOA}>MOA</button>\r\n\r\n            <table>\r\n                <tr>\r\n                    <th>---</th>\r\n                    {headersPOA.map( e =>\r\n                        <th>{e}</th>)}\r\n                </tr>\r\n\r\n                {headersMOA.map(c =>\r\n                <tr>\r\n                    <th>{c}</th>\r\n\r\n                    {\r\n                        <tr>test</tr>\r\n                        /*row = phonemes.filter(phoneme => phoneme.moa === e )\r\n                        row = [...new Set(phonemes\r\n                        .filter(phoneme => phoneme.moa === e)\r\n                        .map(phoneme => (phoneme.symbol)))]*/\r\n                    }\r\n\r\n                </tr>)}\r\n\r\n                <tr>\r\n                    <th>Plosive</th>\r\n                    <td>Smith</td>\r\n                    <td>50</td>\r\n                </tr>\r\n                <tr>\r\n                    <th>Nasal</th>\r\n                    <td>Jackson</td>\r\n                    <td>94</td>\r\n                </tr>\r\n                </table>\r\n        </div>\r\n    );\r\n}\r\nexport default IPAConsonants;"]},"metadata":{},"sourceType":"module"}
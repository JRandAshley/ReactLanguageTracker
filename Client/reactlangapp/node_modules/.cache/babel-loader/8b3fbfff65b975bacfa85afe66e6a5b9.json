{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\randa\\\\source\\\\repos\\\\LangAppReact\\\\Client\\\\reactlangapp\\\\src\\\\MorphemeManager.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport \"./App.scss\";\nimport Axios from 'axios';\nimport Morpheme from './Morpheme';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MorphemeManager() {\n  _s();\n\n  const initialData = [{\n    sounds: \"160,153,168\",\n    type: \"root\",\n    meaning: \"a 4 legged feline\"\n  }];\n  const [morphemes, setMorphemes] = useState(initialData);\n  const [phonemes, setPhonemes] = useState([]);\n\n  const getPhonemes = () => {\n    new Promise((resolve, reject) => {\n      Axios.get(\"http://localhost:3001/api/get\").then(response => {\n        setPhonemes(response.data);\n      });\n      resolve(\"updated phonemes from database\");\n    });\n  };\n\n  const getTypeAsWord = type => {\n    if (type === \"C\") {\n      return \"Consonant\";\n    }\n\n    if (type === \"V\") {\n      return \"Vowel\";\n    } else {\n      return \"Phoneme\";\n    }\n  };\n\n  useEffect(() => {\n    getPhonemes();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"flexbox-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      align: \"center\",\n      children: \"Morphemes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this), Object.values(morphemes).map(morpheme => /*#__PURE__*/_jsxDEV(Morpheme, {\n      sounds: morpheme.sounds,\n      type: morpheme.type,\n      meaning: morpheme.meaning\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"flexbox-scroller\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"flexbox-row-container\",\n        children: Object.values(phonemes).map(phoneme => /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"flexbox-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: phoneme.symbol\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Easy Type: \", phoneme.easyType]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [phoneme.sol, \" \", phoneme.poa, \" \", phoneme.moa, phoneme.height, \" \", phoneme.backness, \" \", phoneme.rounding, \" \", getTypeAsWord(phoneme.type)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MorphemeManager, \"3ek/+IzSaXMkT1njvnvVX0sS83c=\");\n\n_c = MorphemeManager;\nexport default MorphemeManager;\n\nvar _c;\n\n$RefreshReg$(_c, \"MorphemeManager\");","map":{"version":3,"sources":["C:/Users/randa/source/repos/LangAppReact/Client/reactlangapp/src/MorphemeManager.js"],"names":["React","useState","useEffect","Axios","Morpheme","MorphemeManager","initialData","sounds","type","meaning","morphemes","setMorphemes","phonemes","setPhonemes","getPhonemes","Promise","resolve","reject","get","then","response","data","getTypeAsWord","Object","values","map","morpheme","phoneme","symbol","easyType","sol","poa","moa","height","backness","rounding"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAO,YAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;;;AAEA,SAASC,eAAT,GAA2B;AAAA;;AACvB,QAAMC,WAAW,GAAG,CAChB;AAACC,IAAAA,MAAM,EAAE,aAAT;AAAwBC,IAAAA,IAAI,EAAE,MAA9B;AAAsCC,IAAAA,OAAO,EAAE;AAA/C,GADgB,CAApB;AAIA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAACK,WAAD,CAA1C;AAEA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,EAAD,CAAxC;;AAEA,QAAMa,WAAW,GAAG,MAAM;AACtB,QAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7Bd,MAAAA,KAAK,CAACe,GAAN,CAAU,+BAAV,EAA2CC,IAA3C,CAAiDC,QAAD,IAAc;AAC1DP,QAAAA,WAAW,CAACO,QAAQ,CAACC,IAAV,CAAX;AACH,OAFD;AAGAL,MAAAA,OAAO,CAAC,gCAAD,CAAP;AACH,KALD;AAMH,GAPD;;AASA,QAAMM,aAAa,GAAId,IAAD,IAAU;AAC5B,QAAGA,IAAI,KAAK,GAAZ,EAAgB;AACZ,aAAO,WAAP;AACH;;AACD,QAAGA,IAAI,KAAK,GAAZ,EAAgB;AACZ,aAAO,OAAP;AACH,KAFD,MAGI;AACA,aAAO,SAAP;AACH;AACJ,GAVD;;AAYAN,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,WAAW;AACd,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACA;AAAK,IAAA,KAAK,EAAC,mBAAX;AAAA,4BACI;AAAI,MAAA,KAAK,EAAC,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAGKS,MAAM,CAACC,MAAP,CAAcd,SAAd,EAAyBe,GAAzB,CAA6BC,QAAQ,iBAClC,QAAC,QAAD;AAAU,MAAA,MAAM,EAAEA,QAAQ,CAACnB,MAA3B;AAAmC,MAAA,IAAI,EAAEmB,QAAQ,CAAClB,IAAlD;AAAwD,MAAA,OAAO,EAAEkB,QAAQ,CAACjB;AAA1E;AAAA;AAAA;AAAA;AAAA,YADH,CAHL,eASI;AAAK,MAAA,KAAK,EAAC,kBAAX;AAAA,6BACI;AAAK,QAAA,KAAK,EAAC,uBAAX;AAAA,kBACKc,MAAM,CAACC,MAAP,CAAcZ,QAAd,EAAwBa,GAAxB,CAA4BE,OAAO,iBAChC;AAAK,UAAA,KAAK,EAAC,cAAX;AAAA,kCACI;AAAA,sBAAKA,OAAO,CAACC;AAAb;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAA,sCAAeD,OAAO,CAACE,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI;AAAA,uBAAIF,OAAO,CAACG,GAAZ,OAAkBH,OAAO,CAACI,GAA1B,OAAgCJ,OAAO,CAACK,GAAxC,EACCL,OAAO,CAACM,MADT,OACkBN,OAAO,CAACO,QAD1B,OACqCP,OAAO,CAACQ,QAD7C,OACwDb,aAAa,CAACK,OAAO,CAACnB,IAAT,CADrE;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADH;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAwBH;;GA1DQH,e;;KAAAA,e;AA2DT,eAAeA,eAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport \"./App.scss\";\r\nimport Axios from 'axios';\r\nimport Morpheme from './Morpheme';\r\n\r\nfunction MorphemeManager() { \r\n    const initialData = [\r\n        {sounds: \"160,153,168\", type: \"root\", meaning: \"a 4 legged feline\"}\r\n    ]\r\n\r\n    const [morphemes, setMorphemes] = useState(initialData)\r\n\r\n    const [phonemes, setPhonemes] = useState([])\r\n\r\n    const getPhonemes = () => {\r\n        new Promise((resolve, reject) => {\r\n            Axios.get(\"http://localhost:3001/api/get\").then((response) => {\r\n                setPhonemes(response.data);\r\n            });\r\n            resolve(\"updated phonemes from database\")\r\n        })\r\n    }\r\n\r\n    const getTypeAsWord = (type) => {\r\n        if(type === \"C\"){\r\n            return \"Consonant\"\r\n        }\r\n        if(type === \"V\"){\r\n            return \"Vowel\"\r\n        }\r\n        else{\r\n            return \"Phoneme\"\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getPhonemes();\r\n    }, []);\r\n\r\n    return(\r\n    <div class=\"flexbox-container\">\r\n        <h1 align=\"center\">Morphemes</h1>\r\n\r\n        {Object.values(morphemes).map(morpheme =>(\r\n            <Morpheme sounds={morpheme.sounds} type={morpheme.type} meaning={morpheme.meaning}/>\r\n        ))}\r\n\r\n\r\n\r\n        <div class=\"flexbox-scroller\">\r\n            <div class=\"flexbox-row-container\">\r\n                {Object.values(phonemes).map(phoneme =>(\r\n                    <div class=\"flexbox-item\">\r\n                        <h3>{phoneme.symbol}</h3>\r\n                        <p>Easy Type: {phoneme.easyType}</p>\r\n                        <p>{phoneme.sol} {phoneme.poa} {phoneme.moa} \r\n                        {phoneme.height} {phoneme.backness} {phoneme.rounding} {getTypeAsWord(phoneme.type)}</p>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\nexport default MorphemeManager"]},"metadata":{},"sourceType":"module"}